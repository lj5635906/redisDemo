package com.redis.simple;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.Set;import redis.clients.jedis.Jedis;import redis.clients.jedis.ScanResult;import com.redis.simple.base.BaseRedis;/*** RedisHashUtil* @author Roger*/public class RedisHashUtil extends BaseRedis {    	private RedisHashUtil(){			}	     /**     * 设置HashMap     *     * @param key     *            Key     * @param hash     *            Map     * @return 状态码：成功-OK     */     public static String hmset(String key, Map<String, String> hash) {          Jedis jedis = getJedis();          String data = jedis.hmset(key, hash);          returnJedis(jedis);          return data;     }     /**     * 设置哈希字段的字符串值,存在则不设置     *     * @param key     *            key     * @param field     *            hashmap ---> key     * @param value     *            hashmap ---> value     * @return     */     public static long hset(String key, String field, String value) {          Jedis jedis = getJedis();          Long data = jedis.hset(key, field, value);          returnJedis(jedis);          return data;     }     /**     * 设置哈希字段的字符串值,存在则不设置     *     * @param key     *            key     * @param field     *            hashmap ---> key     * @param value     *            hashmap ---> value     * @return     */     public static long hsetnx(String key, String field, String value) {          Jedis jedis = getJedis();          Long data = jedis.hsetnx(key, field, value);          returnJedis(jedis);          return data;     }     /**     * 查询该key对应的所有hash     *     * @param key     * @return Map<String, String>     */     public static Map<String, String> hgetall(String key) {          Jedis jedis = getJedis();          Map<String, String> data = jedis.hgetAll(key);          returnJedis(jedis);          return data;     }          /**      * 通过key和fields查询值      * @param key      * 	key      * @param fields      * 	hash中的key      * @return      * 	List<String>	      */     public static List<String> hmget(String key,String...fields){    	 Jedis jedis = getJedis();         List<String> data = jedis.hmget(key, fields);         returnJedis(jedis);         return data;     }     /**     * 获取hash中的值     *     * @param key     *            key     * @param field     *            hash中的key     * @return String     */     public static String hget(String key, String field) {          Jedis jedis = getJedis();          String data = jedis.hget(key, field);          returnJedis(jedis);          return data;     }     /**     *     * 判断一个哈希字段存在与否     *     * @param key     *            key     * @param field     *            hash中的key     * @return Boolean     */     public static Boolean hexists(String key, String field) {          Jedis jedis = getJedis();          Boolean data = jedis.hexists(key, field);          returnJedis(jedis);          return data;     }     /**     * 删除一个或多个哈希字段     *     * @param key     *            key     * @param fields     *            hash中的key     * @return 影响     */     public static long hdel(String key, String... fields) {          Jedis jedis = getJedis();          long data = jedis.hdel(key, fields);          returnJedis(jedis);          return data;     }     /**     * 由给定数量增加的哈希字段的整数值     *     * @param key     *            key     * @param fields     *            hash中的key     * @param increment     *            增加量     * @return 影响     */     public static long hincrby(String key, String field, long increment) {          Jedis jedis = getJedis();          long data = jedis.hincrBy(key, field, increment);          returnJedis(jedis);          return data;     }     /**     * 由给定的递增量哈希字段的浮点值     *     * @param key     *            key     * @param fields     *            hash中的key     * @param increment     *            增加量     * @return 影响     */     public static double hincrByFloat(String key, String field, double increment) {          Jedis jedis = getJedis();          Double data = jedis.hincrByFloat(key, field, increment);          returnJedis(jedis);          return data;     }     /**     * 获取所有在哈希字段(hash--->key)     *     * @param key     *            key     * @return Set<String>     */     public static Set<String> hkeys(String key) {          Jedis jedis = getJedis();          Set<String> data = jedis.hkeys(key);          returnJedis(jedis);          return data;     }     /**     * 获取哈希字段数     *     * @param key     *            key     * @return     */     public static long hlen(String key) {          Jedis jedis = getJedis();          Long data = jedis.hlen(key);          returnJedis(jedis);          return data;     }     /**     * 获取在哈希中的所有值     *     * @param key     * @return List<String>     */     public static List<String> hvals(String key) {          Jedis jedis = getJedis();          List<String> data = jedis.hvals(key);          returnJedis(jedis);          return data;     }     /**     * 增量迭代哈希字段及相关值     *     * @param key     * @param cursor     * @return     */     public static ScanResult<Entry<String, String>> hscan(String key, String cursor) {          Jedis jedis = getJedis();          ScanResult<Entry<String, String>> data = jedis.hscan(key, cursor);          returnJedis(jedis);          return data;     }}