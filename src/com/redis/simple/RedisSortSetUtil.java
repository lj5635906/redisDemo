package com.redis.simple;import java.util.Map;import java.util.Set;import redis.clients.jedis.Jedis;import redis.clients.jedis.Tuple;import com.redis.simple.base.BaseRedis;/*** RedisSortSetUtil* @author Roger*/public class RedisSortSetUtil extends BaseRedis {	private RedisSortSetUtil(){			}	     /**     * 向集合中增加一条记录,如果这个值已存在，这个值对应的权重将被置为新的权重     *     * @param String     *            key     * @param score     *            权重--用于排序     * @param String     *            member 要加入的值，member在集合中已存在不添加     * @return 状态码 1成功，0已存在member的值     * */     public static long zadd(String key, double score, String member) {          Jedis jedis = getJedis();          long status = jedis.zadd(key, score, member);          returnJedis(jedis);          return status;     }     /**     * 向集合中增加一条记录,如果这个值已存在，这个值对应的权重将被置为新的权重     *     * @param key     *            key     * @param scoreMembers     *            Map<String, Double>     * @return 状态码 1成功，0已存在member的值     */     public static long zadd(String key, Map<String, Double> scoreMembers) {          Jedis jedis = getJedis();          long s = jedis.zadd(key, scoreMembers);          returnJedis(jedis);          return s;     }     /**     * 由索引返回一个成员范围的有序集合。     *     * @param key     *            key     * @param start     *            开始位置：从0开始     * @param end     *            结束位置     * @return Set<String>     */     public static Set<String> zrange(String key, long start, long end) {          Jedis jedis = getJedis();          Set<String> data = jedis.zrange(key, start, end);          returnJedis(jedis);          return data;     }     /**     * 返回一个成员范围的有序集合（由字典范围）     *     * @param key     *            key     * @param start     *            开始位置：从0开始     * @param end     *            结束位置     * @return Set<String>     */     public static Set<String> zrangebylex(String key, String min, String max) {          Jedis jedis = getJedis();          Set<String> data = jedis.zrangeByLex(key, min, max);          returnJedis(jedis);          return data;     }     /**     * 按分数返回一个成员范围的有序集合。     *     * @param key     *            key     * @param start     *            开始位置：从0开始     * @param end     *            结束位置     * @return Set<String>     */     public static Set<String> zrangebyscore(String key, double min, double max) {          Jedis jedis = getJedis();          Set<String> data = jedis.zrangeByScore(key, min, max);          returnJedis(jedis);          return data;     }     /**     * 获取集合中元素的数量     *     * @param String     *            key     * @return 如果返回0则集合不存在     * */     public static long zcard(String key) {          Jedis sjedis = getJedis();          long len = sjedis.zcard(key);          returnJedis(sjedis);          return len;     }     /**     * 计算一个有序集合成员与给定值范围内的数量     *     * @param key     *            key     * @param min     *            最小权重(包含边界)     * @param max     *            最大权重(包含边界)     * @return     *     */     public static long zcount(String key, long min, long max) {          Jedis sjedis = getJedis();          long count = sjedis.zcount(key, min, max);          returnJedis(sjedis);          return count;     }     /**     * 计算一个给定的字典范围之间的有序集合成员的数量     *     * @param key     *            key     * @param min     *            最小权重(包含边界)     * @param max     *            最大权重(包含边界)     * @return     *     */     public static long zlexcount(String key, String min, String max) {          Jedis sjedis = getJedis();          long count = sjedis.zlexcount(key, min, max);          returnJedis(sjedis);          return count;     }     /**     * 在有序集合增加成员的分数     *     * @param key     *            key     * @param score     *            添加权重量，改变后的权重量=原有量+添加量     * @param member     *            添加值     * @return 改变后的权重量     */     public static double zincrby(String key, double score, String member) {          Jedis jedis = getJedis();          Double count = jedis.zincrby(key, score, member);          returnJedis(jedis);          return count;     }     /**     * 多重交叉排序集合，并存储生成一个新的键有序集合。     *     * @param dstkey     * @param sets     * @return     */     public static long zinterstore(String dstkey, String... sets) {          Jedis jedis = getJedis();          Long count = jedis.zinterstore(dstkey, sets);          returnJedis(jedis);          return count;     }     /**     * 从有序集合中删除一个或多个成员     *     * @param key     *            key     * @param members     *            一个或多个成员     * @return     */     public static long zrem(String key, String... members) {          Jedis jedis = getJedis();          Long count = jedis.zrem(key, members);          returnJedis(jedis);          return count;     }     /**     * 删除所有成员在给定的字典范围之间的有序集合     *     * @param key     *            key     * @param min     *     * @param max     *     * @return     */     public static long zremrangebylex(String key, String min, String max) {          Jedis jedis = getJedis();          Long count = jedis.zremrangeByLex(key, min, max);          returnJedis(jedis);          return count;     }     /**     * 在给定的索引之内删除所有成员的有序集合     *     * @param key     *            key     * @param start     *            开始下标     * @param end     *            结束下标     * @return 删除量     */     public static long zremrangebyrank(String key, long start, long end) {          Jedis jedis = getJedis();          Long count = jedis.zremrangeByRank(key, start, end);          returnJedis(jedis);          return count;     }     /**     * 在给定的分数之内删除所有成员的有序集合     *     * @param key     *            key     * @param start     *            开始权重(包含边界)     * @param end     *            结束权重(包含边界)     * @return     */     public static long zremrangebyscore(String key, double start, double end) {          Jedis jedis = getJedis();          Long count = jedis.zremrangeByScore(key, start, end);          returnJedis(jedis);          return count;     }     /**     * 返回一个成员范围的有序集合，通过索引，以分数排序，从高分到低分     *     * @param key     *            key     * @param start     *            索引开始位置     * @param end     *            索引结束位置     * @return Set<String>     */     public static Set<String> zrevrange(String key, long start, long end) {          Jedis jedis = getJedis();          Set<String> data = jedis.zrevrange(key, start, end);          returnJedis(jedis);          return data;     }     /**     * 返回一个成员范围的有序集合，按分数，以分数排序从高分到低分，开始权重 > 结束权重     *     * @param key     *            key     * @param start     *            开始权重(降序)     * @param end     *            结束权重(降序)     * @return Set<String>     */     public static Set<String> zrevrangebyscore(String key, long max, long min) {          Jedis jedis = getJedis();          Set<String> data = jedis.zrevrangeByScore(key, max, min);          returnJedis(jedis);          return data;     }          /**      * 通过权重排序【降序】      * @param key      * 	key      * @param max      * 	最大权重      * @param min      * 	最小权重      * @param offset      * 	开始位置      * @param count      * 	查询总数量      * @return      */     public static Set<Tuple> zrevrangeByScoreWithScores(String key,double max,double min,int offset,int count){    	 Jedis jedis = getJedis();    	 Set<Tuple> data = jedis.zrevrangeByScoreWithScores(key, max, min, offset, count);     	 returnJedis(jedis);         return data;     }          /**      * 通过权重排序【降序】,从0位置开始，权重范围为【-1 - Double.MAX_VALUE】      * @param key      * 	key      * @param count      * 	查询总数量      * @return      */     public static Set<Tuple> zrevrangeByScoreWithScores(String key,int count){    	 Jedis jedis = getJedis();    	 Set<Tuple> data = jedis.zrevrangeByScoreWithScores(key, Double.MAX_VALUE, -1,0, count);     	 returnJedis(jedis);         return data;     }          /**      * 通过权重排序【升序】      * @param key      * 	key      * @param start      * 	开始位置      * @param end      * 	结束位置      * @return      */     public static Set<Tuple> zrangeWithScores(String key,long start,long end){    	 Jedis jedis = getJedis();    	 Set<Tuple> data = jedis.zrangeWithScores(key, start, end);     	 returnJedis(jedis);         return data;     }     /**     * 确定一个有序集合成员的索引，以分数排序，从高分到低分,返回当前索引     *     * @param key     *           key     * @param member     *           结合成员     * @return     *           排序后的索引     */     public static long zrevrank(String key, String member) {          Jedis jedis = getJedis();          Long data = jedis.zrevrank(key, member);          returnJedis(jedis);          return data;     }         /**     * 返回集合成员的权重     * @param key     *           key     * @param member     *           集合成员     * @return      权重     */     public static double zscore(String key, String member) {          Jedis jedis = getJedis();          Double data = jedis.zscore(key, member);          returnJedis(jedis);          return data;     }         /**     * 添加多个集排序，所得排序集合存储在一个新的键     * @param dstkey     *           新集合名     * @param sets     *           需要添加的集合     * @return     */     public static long zunionstore(String dstkey,String... sets){          Jedis jedis = getJedis();          Long data = jedis.zunionstore(dstkey, sets);          returnJedis(jedis);          return data;     }    }