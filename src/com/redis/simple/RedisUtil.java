package com.redis.simple;import java.util.List;import java.util.Set;import redis.clients.jedis.Jedis;import redis.clients.jedis.Transaction;import redis.clients.util.SafeEncoder;import com.redis.simple.base.BaseRedis;/** * RedisUtil *  * @author Roger */public class RedisUtil extends BaseRedis {	private RedisUtil() {	}		public static Jedis getJedis(){		return BaseRedis.getJedis();	}		/**	 * 获取值	 * 	 * @param key	 *            key	 * @return String	 */	public static String get(String key) {		Jedis jedis = getJedis();		String data = jedis.get(key);		returnJedis(jedis);		return data;	}	/**	 * 设置值的同时设置过期时间	 * 	 * @param key	 *            key	 * @param seconds	 *            过期时间(秒)	 * @param value	 *            值	 * @return	 */	public static String setex(String key, int seconds, String value) {		Jedis jedis = getJedis();		String data = jedis.setex(key, seconds, value);		returnJedis(jedis);		return data;	}	/**	 * 设置值	 * 	 * @param key	 * @param value	 * @return	 */	public static String set(String key, String value) {		Jedis jedis = getJedis();		String data = jedis.set(key, value);		returnJedis(jedis);		return data;	}	/**	 * 获取字符串值的长度	 * 	 * @param key	 *            key	 * @return len	 */	public static long strlen(String key) {		Jedis jedis = getJedis();		Long data = jedis.strlen(key);		returnJedis(jedis);		return data;	}	/**	 * 清空所有key	 */	public static String flushAll() {		Jedis jedis = getJedis();		String stata = jedis.flushAll();		returnJedis(jedis);		return stata;	}	/**	 * 更改key	 * 	 * @param String	 *            oldkey	 * @param String	 *            newkey	 * @return 状态码	 * */	public static String rename(String oldkey, String newkey) {		return rename(SafeEncoder.encode(oldkey), SafeEncoder.encode(newkey));	}	/**	 * 更改key,仅当新key不存在时才执行	 * 	 * @param String	 *            oldkey	 * @param String	 *            newkey	 * @return 状态码	 * */	public static long renamenx(String oldkey, String newkey) {		Jedis jedis = getJedis();		long status = jedis.renamenx(oldkey, newkey);		returnJedis(jedis);		return status;	}	/**	 * 更改key	 * 	 * @param String	 *            oldkey	 * @param String	 *            newkey	 * @return 状态码	 * */	public static String rename(byte[] oldkey, byte[] newkey) {		Jedis jedis = getJedis();		String status = jedis.rename(oldkey, newkey);		returnJedis(jedis);		return status;	}	/**	 * 设置key的过期时间，以秒为单位	 * 	 * @param String	 *            key	 * @param 时间	 *            ,已秒为单位	 * @return 影响的记录数	 * */	public static long expired(String key, int seconds) {		Jedis jedis = getJedis();		long count = jedis.expire(key, seconds);		returnJedis(jedis);		return count;	}	/**	 * 设置key的过期时间,它是距历元（即格林威治标准时间 1970 年 1 月 1 日的 00:00:00，格里高利历）的偏移量。	 * 	 * @param String	 *            key	 * @param 时间	 *            ,已秒为单位	 * @return 影响的记录数	 * */	public static long expireAt(String key, long timestamp) {		Jedis jedis = getJedis();		long count = jedis.expireAt(key, timestamp);		returnJedis(jedis);		return count;	}	/**	 * 查询key的过期时间	 * 	 * @param String	 *            key	 * @return 以秒为单位的时间表示	 * */	public static long ttl(String key) {		Jedis sjedis = getJedis();		long len = sjedis.ttl(key);		returnJedis(sjedis);		return len;	}	/**	 * 取消对key过期时间的设置	 * 	 * @param key	 * @return 影响的记录数	 * */	public static long persist(String key) {		Jedis jedis = getJedis();		long count = jedis.persist(key);		returnJedis(jedis);		return count;	}	/**	 * 删除keys对应的记录,可以是多个key	 * 	 * @param String	 *            ... keys	 * @return 删除的记录数	 * */	public static long del(String... keys) {		Jedis jedis = getJedis();		long count = jedis.del(keys);		returnJedis(jedis);		return count;	}	/**	 * 删除keys对应的记录,可以是多个key	 * 	 * @param String	 *            ... keys	 * @return 删除的记录数	 * */	public static Long del(byte[]... keys) {		Jedis jedis = getJedis();		Long count = jedis.del(keys);		returnJedis(jedis);		return count;	}	/**	 * 判断key是否存在,存在-->true；不存在-->false	 * 	 * @param String	 *            key	 * @return boolean	 * */	public static boolean exists(String key) {		Jedis sjedis = getJedis();		boolean exis = sjedis.exists(key);		returnJedis(sjedis);		return exis;	}	/**	 * 返回指定key存储的类型	 * 	 * @param String	 *            key	 * @return String string|list|set|zset|hash	 * **/	public static String type(String key) {		Jedis sjedis = getJedis();		String type = sjedis.type(key);		returnJedis(sjedis);		return type;	}	/**	 * 增加键的整数值一次	 * 	 * @param key	 * @return	 */	public static long incr(String key) {		Jedis sjedis = getJedis();		long data = sjedis.incr(key);		returnJedis(sjedis);		return data;	}	/**	 * 由给定的数量递增键的整数值	 * 	 * @param key	 * @param incrby	 *            增加量	 * @return	 */	public static long incrBy(String key, long incrby) {		Jedis sjedis = getJedis();		long data = sjedis.incrBy(key, incrby);		returnJedis(sjedis);		return data;	}	/**	 * 查找所有匹配给定的模式的键	 * 	 * @param String	 *            key的表达式,*表示多个，？表示一个	 * */	public static Set<String> keys(String pattern) {		Jedis jedis = getJedis();		Set<String> set = jedis.keys(pattern);		returnJedis(jedis);		return set;	}	/**	 * 对List,Set,SortSet进行排序,如果集合数据较大应避免使用这个方法	 * 	 * @param String	 *            key	 * @return List<String> 集合的全部记录	 * **/	public static List<String> sort(String key) {		Jedis sjedis = getJedis();		List<String> list = sjedis.sort(key);		returnJedis(sjedis);		return list;	}		/**	 *  ping	 * @return 	 */	public static String ping(){		Jedis jedis = getJedis();		String ping = jedis.ping();		returnJedis(jedis);		return ping;	}				/**	 * 获取Jedis事物	 * @return	Transaction	 */	public Transaction getTransaction(){		return  getJedis().multi();	}		/**	 * 	 * @param transaction	 * @return	 */	public List<Object> exec(Transaction transaction){		return transaction.exec();	}}